package ecoinlib

// multi-connection concurrency communication tree 多连接并发通信树
// 这里参考了李皎《区块链数据通信性能优化》一书中提出的考虑节点失效的多连接并发通信树的一些内容，并作一些基于该场景的适应性修改

// 在我的初始设计中，存在四类角色：医院、第三方机构、医生、病人，当然还有一个创建者
// 显然医院和第三方是基本不会下线的稳定节点，为了通信效率：
// 医院、第三方为拥有打包区块权限（这里按照习惯也称作挖矿）
// 在通信树中，出块节点作为通信树源节点，其余医院及第三方作为转发节点，病人和医生的电脑或者手机默认为叶节点
// 无论是哪一类节点新上线时必定向医院和第三方发起同步请求

// 怎么决定谁挖矿？医院和第三方节点中都会不断收集最新得到的交易，并打包区块
// 采用激励措施？	暂时不想
// 随机从健康节点选择？

// 这棵树不是显性的，对于每个节点来说，只需要知道它需要连接的其他节点，并不需要知道整棵树的构造
// 那么在我的设计里，病人节点和医生节点成为叶节点，只需要知道所有医院和第三方节点地址，并进行ping通检测，得到新的可用节点集合，且根据ping通响应速度来排序，优先从最快相应的节点同步，紧接着向第二个节点同步，直至第三个（这个目的是为了防止第一个节点不是最新的）
// 那么对于医院和第三方，他需要维护两个集合，一个是它用于同步的其他转发节点集合，一个是他需要提供同步的（可以省略）
// 等于说所有节点都只需要维护医院及第三方的结点地址集合及可用集合。所以M3cTree结构如图

// 同步策略：
// 医院和第三方之间p2p【多连接并发】同步
// 叶节点上线后向转发节点请求同步，同步后驻留在转发节点维护的叶节点集合中，转发节点在得到新区快后会向叶节点集合发送新区快并重试三次，三次后失败者剔除出本地集合

type M3cTree struct {

}